import 'reflect-metadata';
import { AppDataSource } from '../config/typeorm.config';
import * as bcrypt from 'bcrypt';
import { UserEntity } from '../users/entities/user.entity';
import { Gender, UserRole } from '../users/enums';

async function hashPassword(password: string): Promise<string> {
  const saltRounds = 10;
  return await bcrypt.hash(password, saltRounds);
}

async function seed() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–¥–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

  try {
    await AppDataSource.initialize();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    const userRepo = AppDataSource.getRepository(UserEntity);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const existingUsers = await userRepo.count();
    if (existingUsers > 0) {
      console.log(
        '‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –°–∏–¥–∏–Ω–≥ –ø—Ä–æ–ø—É—â–µ–Ω.',
      );
      await AppDataSource.destroy();
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersData = [
      {
        name: 'Ivan Ivanov',
        email: 'ivan@mail.ru',
        password: await hashPassword('password123'),
        about: 'Frontend developer with 3 years of experience',
        birthdate: new Date('2000-01-01'),
        city: 'Moscow',
        gender: Gender.MALE,
        avatar: 'ivan.png',
        role: UserRole.USER,
        refreshToken: '',
      },
      {
        name: 'Vasya Pupkin',
        email: 'vasya@mail.ru',
        password: await hashPassword('admin123'),
        about: 'Backend developer and system administrator',
        birthdate: new Date('1995-05-15'),
        city: 'Saint Petersburg',
        gender: Gender.MALE,
        avatar: 'vasya.png',
        role: UserRole.ADMIN,
        refreshToken: '',
      },
    ];

    const testUsers = userRepo.create(usersData);
    await userRepo.save(testUsers);

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('üë• –°–æ–∑–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
    testUsers.forEach((user) => {
      console.log(`   - ${user.name} (${user.email}) - ${user.role}`);
    });
    console.log('üîë –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log('   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: vasya@mail.ru / admin123');
    console.log('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ivan@mail.ru / password123');

    await AppDataSource.destroy();
    console.log('‚úÖ –°–∏–¥–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∏–¥–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    process.exit(1);
  }
}

seed().catch((error) => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–¥–∏–Ω–≥–∞:', error);
  process.exit(1);
});
